{"version":3,"sources":["ng-location-search.js"],"names":["angular","module","directive","$rootScope","$log","$timeout","$location","$window","$parse","$httpParamSerializer","restrict","require","link","scope","elem","attrs","Ctrl","search_keys","modelCtrl","formCtrl","trailling_slash","url","isString","replace","parseLocationSearch","value","new_search","is_replace_search","$eval","ngLocationSearchReplace","reset_search","ngLocationSearchReset","location_href","ngLocationSearchUrl","abs_url","location","href","hash","value_object","fromJson","err","forEach","key","val","search_val","isObject","isDefined","toString","current_search","search","equals","extend","$broadcast","is_add_to_url","indexOf","is_internal_url","is_abs_url","protocol","path_url","path","hash_url","param_url","new_href","$$html5","$apply","_path_urls","split","length","debug","ngLocationSearch","isArray","changeModel","loc_search","toJson","getter","ngModel","setter","assign","changeForm","fields","ngSubmit","$watch","$modelValue","newVal","oldVal","$valid","$on","event","newUrl","oldUrl","newState","oldState","on","submit","form","name","handleDestroyEvent","window"],"mappings":"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","file":"ng-location-search.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngLocationSearch', []).directive('ngLocationSearch', [\n        '$rootScope',\n        '$log',\n        '$timeout',\n        '$location',\n        '$window',\n        '$parse',\n        '$httpParamSerializer',\n        function ($rootScope, $log, $timeout, $location, $window, $parse, $httpParamSerializer) {\n            return {\n                restrict: \"A\",\n                require: ['?ngModel', '?^form'],\n                link: function (scope, elem, attrs, Ctrl) {\n\n                    var search_keys;\n\n                    /**\n                     * Set the controllers for model and form\n                     */\n                    var modelCtrl = Ctrl[0];\n                    var formCtrl = Ctrl[1];\n\n\n                    /**\n                     * Trailling Slash Url\n                     *\n                     * @param url\n                     */\n                    function trailling_slash (url) {\n\n                        if ( angular.isString(url) ) {\n                            return url.replace(/\\/$/, '');\n                        }\n\n                        return false;\n                    }\n\n\n                    /**\n                     * Parse value for set the location search.\n                     *\n                     * @param value\n                     */\n                    function parseLocationSearch(value) {\n\n                        var new_search = {};\n                        var is_replace_search = scope.$eval(attrs.ngLocationSearchReplace);\n                        var reset_search = scope.$eval(attrs.ngLocationSearchReset);\n                        var location_href = trailling_slash(attrs.ngLocationSearchUrl);\n                        var abs_url = trailling_slash($window.location.href.replace($window.location.hash, ''));\n\n                        //Deserializes a JSON search string.\n                        try {\n                            var value_object = angular.fromJson(value);\n\n                            value = value_object;\n                        }\n                        catch(err) {\n\n                        }\n\n                        //Apply key val on location search.\n                        angular.forEach(search_keys, function (key, val) {\n                            var search_val = null;\n\n                            if (angular.isObject(value) && angular.isDefined(value[key]) ) {\n                                search_val = value[key];\n                            }\n                            else if (angular.isString(value)) {\n                                search_val = value;\n                            }\n\n                            new_search[key] = search_val !== '' ? search_val.toString() : null;\n                        });\n\n                        var current_search = $location.search();\n\n                        //Exit if same as current url search\n                        if (angular.equals(new_search, current_search)) {\n                            return;\n                        }\n\n                        if (!reset_search) {\n                            new_search = angular.extend({}, current_search, new_search);\n                        }\n\n                        $rootScope.$broadcast('ngLocationSearchChangeStart', current_search, new_search);\n\n                        //Redirect to search url\n                        if (angular.isString(location_href) && location_href !== abs_url) {\n\n                            var is_add_to_url = (location_href.indexOf('/') === 0) ? false : true;\n                            var is_internal_url = location_href.indexOf('#!/') !== -1 || location_href.indexOf('#/') !== -1;\n                            var is_abs_url = location_href.indexOf($location.protocol()) === 0;\n\n                            var path_url = $location.path();\n                            var hash_url = trailling_slash($window.location.hash.replace($location.url(), ''));\n                            var param_url = $httpParamSerializer(new_search);\n\n                            var new_href = '';\n\n                            if (!$location.$$html5 || is_abs_url) {\n\n                                param_url = param_url ? '?' + param_url : '';\n                                new_href = location_href + param_url;\n\n                                if (!is_internal_url && is_abs_url) {\n                                    path_url = path_url && !$location.$$html5 ? '/' : '';\n                                    new_href = location_href + hash_url + path_url + param_url ;\n                                }\n\n                                $window.location.href = new_href;\n                            }\n                            else {\n\n                                $location.search(param_url);\n\n                                if (is_replace_search) {\n                                    scope.$apply();\n                                }\n\n                                if (is_add_to_url) {\n\n                                    var _path_urls = path_url.split('/');\n\n                                    //Prevent same last for relative url\n                                    if ( _path_urls[_path_urls.length -1] === location_href) {\n                                        new_href = path_url;\n                                    }\n                                    else {\n                                        new_href = path_url + \"/\" + location_href;\n                                    }\n                                }\n                                else {\n                                    new_href = location_href;\n                                }\n\n                                $location.path(new_href);\n                                scope.$apply();\n                            }\n\n                            $log.debug(new_href);\n                        }\n                        else {\n                            $timeout(function() {\n                                $location.search(new_search);\n                            });\n                        }\n\n                        $rootScope.$broadcast('ngLocationSearchChangeSuccess', current_search, new_search);\n                    }\n\n                    //Use the current model scope.\n                    //Only if attribute is set\n                    if (attrs.ngLocationSearch && (modelCtrl || formCtrl)) {\n\n                        search_keys = scope.$eval(attrs.ngLocationSearch);\n                        search_keys = angular.isArray(search_keys) ? search_keys : [attrs.ngLocationSearch];\n                        var search = null;\n\n                        //Set the model change from location search object.\n                        var changeModel = function (loc_search) {\n                            search = (search_keys.length > 1) ? {} : null;\n\n                            //Find in url search params\n                            angular.forEach(search_keys, function (key, val) {\n\n                                if (angular.isObject(search)) {\n                                    search[key] = angular.isDefined(loc_search[key]) ? loc_search[key] : null;\n                                }\n                                else if (angular.isDefined(loc_search[key])) {\n                                    search = loc_search[key];\n                                }\n                            });\n\n                            //transform selected search to string\n                            if (angular.isObject(search)) {\n                                search = angular.toJson(search);\n                            }\n\n                            //Set default model value.\n                            var getter = $parse(attrs.ngModel);\n                            var setter = getter.assign;\n                            setter(scope, search);\n                        };\n\n\n\n                        //Set the model change from location search object.\n                        var changeForm = function (loc_search) {\n\n                            if (search_keys.length > 0) {\n                                var fields = scope.$eval(attrs.ngSubmit);\n\n                                search = {};\n\n                                angular.forEach(search_keys, function(key, val) {\n                                    if (angular.isDefined(loc_search[key])) {\n                                        search[key] = loc_search[key];\n                                    }\n                                });\n\n                                fields = !angular.isObject(fields) ? {} : fields;\n                                search = angular.extend(fields, search);\n\n                                var getter = $parse(attrs.ngSubmit);\n                                var setter = getter.assign;\n                                setter(scope, search);\n                            }\n                        };\n\n\n                        /**\n                         * Evaluate location search attribute if is ngModel\n                         */\n                        if ( modelCtrl ) {\n\n                            //Watch model change\n                            scope.$watch(function () {\n                                    return modelCtrl.$modelValue;\n                                },\n                                function (newVal, oldVal) {\n\n                                    if (newVal !== oldVal && modelCtrl.$valid) {\n\n                                        parseLocationSearch(newVal);\n                                    }\n                                }\n                            );\n\n                            //Change Model on location change start\n                            scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                                changeModel($location.search());\n                            });\n\n                            //Init Model\n                            changeModel($location.search());\n                        }\n\n\n                        /**\n                         * Evaluate location search attribute if is form\n                         */\n                        if (formCtrl) {\n\n                            //Event Submit Form\n                            elem.on('submit', function() {\n                                var submit = scope.$eval(attrs.ngSubmit);\n                                var form = scope.$eval(attrs.name);\n\n                                if (submit && (!form || form.$valid)) {\n                                    parseLocationSearch(submit);\n                                }\n                            });\n\n                            //Change Form on location change start\n                            scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                                changeForm($location.search());\n                            });\n\n                            //Init Form\n                            changeForm($location.search());\n                        }\n\n                    }\n\n                    /**\n                     * Destroy\n                     */\n                    scope.$on('$destroy', function handleDestroyEvent() {\n                            if ( angular.isDefined(scope[attrs.ngSubmit]) ) {\n                                delete scope[attrs.ngSubmit];\n                            }\n                        }\n                    );\n                }\n\n            };\n        }\n    ]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}