{"version":3,"sources":["ng-location-search.js"],"names":["angular","module","directive","$log","$timeout","$location","$window","$parse","$httpParamSerializer","restrict","require","link","scope","elem","attrs","Ctrl","search_keys","modelCtrl","formCtrl","trailling_slash","url","isString","replace","parseLocationSearch","value","new_search","reset_search","$eval","ngLocationSearchReset","location_href","ngLocationSearchUrl","abs_url","location","href","hash","value_object","fromJson","err","forEach","key","val","search_val","isObject","isDefined","current_search","search","extend","path_url","path","hash_url","param_url","new_href","debug","ngLocationSearch","isArray","changeModel","loc_search","length","toJson","getter","ngModel","setter","assign","changeForm","fields","ngSubmit","isUndefined","$watch","$modelValue","newVal","oldVal","$on","event","newUrl","oldUrl","newState","oldState","on","submit","handleDestroyEvent","window"],"mappings":"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","file":"ng-location-search.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngLocationSearch', []).directive('ngLocationSearch', ['$log', '$timeout', '$location', '$window', '$parse', '$httpParamSerializer', function ($log, $timeout, $location, $window, $parse, $httpParamSerializer) {\n        return {\n            restrict: \"A\",\n            require: ['?ngModel', '?^form'],\n            link: function (scope, elem, attrs, Ctrl) {\n\n                var search_keys;\n\n                /**\n                 * Set the controllers for model and form\n                 */\n                var modelCtrl = Ctrl[0];\n                var formCtrl = Ctrl[1];\n\n\n                /**\n                 * Trailling Slash Url\n                 *\n                 * @param url\n                 */\n                function trailling_slash (url) {\n\n                    if ( angular.isString(url) ) {\n                        return url.replace(/\\/$/, '');\n                    }\n\n                    return false;\n                }\n\n\n                /**\n                 * Parse value for set the location search.\n                 *\n                 * @param value\n                 */\n                function parseLocationSearch(value) {\n\n                    if (!value) {\n                        return;\n                    }\n\n                    var new_search = {};\n                    var reset_search = scope.$eval(attrs.ngLocationSearchReset);\n                    var location_href = trailling_slash(attrs.ngLocationSearchUrl);\n                    var abs_url = trailling_slash($window.location.href.replace($window.location.hash, ''));\n\n                    //Deserializes a JSON search string.\n                    try {\n                        var value_object = angular.fromJson(value);\n\n                        value = value_object;\n                    }\n                    catch(err) {\n\n                    }\n\n                    //Apply key val on location search.\n                    angular.forEach(search_keys, function (key, val) {\n                        var search_val = null;\n\n                        if (angular.isObject(value) && angular.isDefined(value[key]) ) {\n                            search_val = value[key];\n                        }\n                        else if (angular.isString(value)) {\n                            search_val = value;\n                        }\n\n                        new_search[key] = search_val !== '' ? search_val : null;\n                    });\n\n                    var current_search = $location.search();\n\n                    if (!reset_search) {\n                        new_search = angular.extend({}, current_search, new_search);\n                    }\n\n                    //Redirect to search url\n                    if (angular.isString(location_href) && location_href !== abs_url) {\n\n                        var path_url = $location.path();\n                        var hash_url = trailling_slash($window.location.hash.replace($location.url(), ''));\n                        var param_url = $httpParamSerializer(new_search);\n\n                        path_url = path_url ? '/' : '';\n                        param_url = param_url ? '?' + param_url : '';\n                        var new_href = location_href + '/' + hash_url + path_url + param_url ;\n\n                        $window.location.href = new_href;\n\n                        $log.debug(new_href);\n                    }\n                    else {\n                        $timeout(function() {\n                            $location.search(new_search);\n                        });\n                    }\n                }\n\n                //Use the current model scope.\n                //Only if attribute is set\n                if (attrs.ngLocationSearch && (modelCtrl || formCtrl)) {\n\n                    search_keys = scope.$eval(attrs.ngLocationSearch);\n                    search_keys = angular.isArray(search_keys) ? search_keys : [attrs.ngLocationSearch];\n                    var search = null;\n\n                    //Set the model change from location search object.\n                    var changeModel = function (loc_search) {\n                        search = (search_keys.length > 1) ? {} : null;\n\n                        //Find in url search params\n                        angular.forEach(search_keys, function (key, val) {\n\n                            if (angular.isObject(search)) {\n                                search[key] = angular.isDefined(loc_search[key]) ? loc_search[key] : null;\n                            }\n                            else if (angular.isDefined(loc_search[key])) {\n                                search = loc_search[key];\n                            }\n                        });\n\n                        //transform selected search to string\n                        if (angular.isObject(search)) {\n                            search = angular.toJson(search);\n                        }\n\n                        //Set default model value.\n                        var getter = $parse(attrs.ngModel);\n                        var setter = getter.assign;\n                        setter(scope, search);\n                    };\n\n\n\n                    //Set the model change from location search object.\n                    var changeForm = function (loc_search) {\n                        var fields = scope.$eval(attrs.ngSubmit);\n\n                        if (!fields && angular.isObject(fields)) {\n                            return;\n                        }\n\n                        if ( angular.isUndefined(scope[attrs.ngSubmit]) ) {\n                            scope[attrs.ngSubmit] = {};\n                        }\n\n                        //Find in url search params\n                        angular.forEach(search_keys, function (key, val) {\n\n                            if (angular.isDefined(loc_search[key])) {\n\n                                //Set default form value.\n                                scope[attrs.ngSubmit][key] = loc_search[key];\n                            }\n                        });\n                    };\n\n\n                    /**\n                     * Evaluate location search attribute if is ngModel\n                     */\n                    if ( modelCtrl ) {\n\n                        //Watch model change\n                        scope.$watch(function () {\n                                return modelCtrl.$modelValue;\n                            },\n                            function (newVal, oldVal) {\n\n                                if (newVal !== oldVal) {\n\n                                    parseLocationSearch(newVal);\n                                }\n                            }\n                        );\n\n                        //Change Model on location change start\n                        scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                            changeModel($location.search());\n                        });\n\n                        //Init Model\n                        changeModel($location.search());\n                    }\n\n\n                    /**\n                     * Evaluate location search attribute if is form\n                     */\n                    if (formCtrl) {\n\n                        //Event Submit Form\n                        elem.on('submit', function() {\n                            var submit = scope.$eval(attrs.ngSubmit);\n\n                            if (submit) {\n                                parseLocationSearch(submit);\n                            }\n                        });\n\n                        //Change Form on location change start\n                        scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                            changeForm($location.search());\n                        });\n\n                        //Init Form\n                        changeForm($location.search());\n                    }\n\n                }\n\n                /**\n                 * Destroy\n                 */\n                scope.$on('$destroy', function handleDestroyEvent() {\n                        if ( angular.isDefined(scope[attrs.ngSubmit]) ) {\n                            delete scope[attrs.ngSubmit];\n                        }\n                    }\n                );\n            }\n\n        };\n    }]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}