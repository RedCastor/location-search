{"version":3,"sources":["ng-location-search.js"],"names":["angular","module","directive","$log","$timeout","$location","$window","$parse","$httpParamSerializer","restrict","require","link","scope","elem","attrs","Ctrl","search_keys","modelCtrl","formCtrl","trailling_slash","url","isString","replace","parseLocationSearch","value","new_search","is_replace_search","$eval","ngLocationSearchReplace","reset_search","ngLocationSearchReset","location_href","ngLocationSearchUrl","abs_url","location","href","hash","value_object","fromJson","err","forEach","key","val","search_val","isObject","isDefined","toString","current_search","search","equals","extend","is_add_to_url","indexOf","is_internal_url","is_abs_url","protocol","path_url","path","hash_url","param_url","new_href","$$html5","$apply","_path_urls","split","length","debug","ngLocationSearch","isArray","changeModel","loc_search","toJson","getter","ngModel","setter","assign","changeForm","fields","ngSubmit","$watch","$modelValue","newVal","oldVal","$valid","$on","event","newUrl","oldUrl","newState","oldState","on","submit","form","name","handleDestroyEvent","window"],"mappings":"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","file":"ng-location-search.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngLocationSearch', []).directive('ngLocationSearch', ['$log', '$timeout', '$location', '$window', '$parse', '$httpParamSerializer', function ($log, $timeout, $location, $window, $parse, $httpParamSerializer) {\n        return {\n            restrict: \"A\",\n            require: ['?ngModel', '?^form'],\n            link: function (scope, elem, attrs, Ctrl) {\n\n                var search_keys;\n\n                /**\n                 * Set the controllers for model and form\n                 */\n                var modelCtrl = Ctrl[0];\n                var formCtrl = Ctrl[1];\n\n\n                /**\n                 * Trailling Slash Url\n                 *\n                 * @param url\n                 */\n                function trailling_slash (url) {\n\n                    if ( angular.isString(url) ) {\n                        return url.replace(/\\/$/, '');\n                    }\n\n                    return false;\n                }\n\n\n                /**\n                 * Parse value for set the location search.\n                 *\n                 * @param value\n                 */\n                function parseLocationSearch(value) {\n\n                    var new_search = {};\n                    var is_replace_search = scope.$eval(attrs.ngLocationSearchReplace);\n                    var reset_search = scope.$eval(attrs.ngLocationSearchReset);\n                    var location_href = trailling_slash(attrs.ngLocationSearchUrl);\n                    var abs_url = trailling_slash($window.location.href.replace($window.location.hash, ''));\n\n                    //Deserializes a JSON search string.\n                    try {\n                        var value_object = angular.fromJson(value);\n\n                        value = value_object;\n                    }\n                    catch(err) {\n\n                    }\n\n                    //Apply key val on location search.\n                    angular.forEach(search_keys, function (key, val) {\n                        var search_val = null;\n\n                        if (angular.isObject(value) && angular.isDefined(value[key]) ) {\n                            search_val = value[key];\n                        }\n                        else if (angular.isString(value)) {\n                            search_val = value;\n                        }\n\n                        new_search[key] = search_val !== '' ? search_val.toString() : null;\n                    });\n\n                    var current_search = $location.search();\n\n                    //Exit if same as current url search\n                    if (angular.equals(new_search, current_search)) {\n                        return;\n                    }\n\n                    if (!reset_search) {\n                        new_search = angular.extend({}, current_search, new_search);\n                    }\n\n                    //Redirect to search url\n                    if (angular.isString(location_href) && location_href !== abs_url) {\n\n                        var is_add_to_url = (location_href.indexOf('/') === 0) ? false : true;\n                        var is_internal_url = location_href.indexOf('#!/') !== -1 || location_href.indexOf('#/') !== -1;\n                        var is_abs_url = location_href.indexOf($location.protocol()) === 0;\n\n                        var path_url = $location.path();\n                        var hash_url = trailling_slash($window.location.hash.replace($location.url(), ''));\n                        var param_url = $httpParamSerializer(new_search);\n\n                        var new_href = '';\n\n                        if (!$location.$$html5 || is_abs_url) {\n\n                            param_url = param_url ? '?' + param_url : '';\n                            new_href = location_href + param_url;\n\n                            if (!is_internal_url && is_abs_url) {\n                                path_url = path_url && !$location.$$html5 ? '/' : '';\n                                new_href = location_href + hash_url + path_url + param_url ;\n                            }\n\n                            $window.location.href = new_href;\n                        }\n                        else {\n\n                            $location.search(param_url);\n\n                            if (is_replace_search) {\n                                scope.$apply();\n                            }\n\n                            if (is_add_to_url) {\n\n                                var _path_urls = path_url.split('/');\n\n                                //Prevent same last for relative url\n                                if ( _path_urls[_path_urls.length -1] === location_href) {\n                                    new_href = path_url;\n                                }\n                                else {\n                                    new_href = path_url + \"/\" + location_href;\n                                }\n                            }\n                            else {\n                                new_href = location_href;\n                            }\n\n                            $location.path(new_href);\n                            scope.$apply();\n                        }\n\n                        $log.debug(new_href);\n                    }\n                    else {\n                        $timeout(function() {\n                            $location.search(new_search);\n                        });\n                    }\n                }\n\n                //Use the current model scope.\n                //Only if attribute is set\n                if (attrs.ngLocationSearch && (modelCtrl || formCtrl)) {\n\n                    search_keys = scope.$eval(attrs.ngLocationSearch);\n                    search_keys = angular.isArray(search_keys) ? search_keys : [attrs.ngLocationSearch];\n                    var search = null;\n\n                    //Set the model change from location search object.\n                    var changeModel = function (loc_search) {\n                        search = (search_keys.length > 1) ? {} : null;\n\n                        //Find in url search params\n                        angular.forEach(search_keys, function (key, val) {\n\n                            if (angular.isObject(search)) {\n                                search[key] = angular.isDefined(loc_search[key]) ? loc_search[key] : null;\n                            }\n                            else if (angular.isDefined(loc_search[key])) {\n                                search = loc_search[key];\n                            }\n                        });\n\n                        //transform selected search to string\n                        if (angular.isObject(search)) {\n                            search = angular.toJson(search);\n                        }\n\n                        //Set default model value.\n                        var getter = $parse(attrs.ngModel);\n                        var setter = getter.assign;\n                        setter(scope, search);\n                    };\n\n\n\n                    //Set the model change from location search object.\n                    var changeForm = function (loc_search) {\n\n                        if (search_keys.length > 0) {\n                            var fields = scope.$eval(attrs.ngSubmit);\n\n                            search = {};\n\n                            angular.forEach(search_keys, function(key, val) {\n                                if (angular.isDefined(loc_search[key])) {\n                                    search[key] = loc_search[key];\n                                }\n                            });\n\n                            fields = !angular.isObject(fields) ? {} : fields;\n                            search = angular.extend(fields, search);\n\n                            var getter = $parse(attrs.ngSubmit);\n                            var setter = getter.assign;\n                            setter(scope, search);\n                        }\n                    };\n\n\n                    /**\n                     * Evaluate location search attribute if is ngModel\n                     */\n                    if ( modelCtrl ) {\n\n                        //Watch model change\n                        scope.$watch(function () {\n                                return modelCtrl.$modelValue;\n                            },\n                            function (newVal, oldVal) {\n\n                                if (newVal !== oldVal && modelCtrl.$valid) {\n\n                                    parseLocationSearch(newVal);\n                                }\n                            }\n                        );\n\n                        //Change Model on location change start\n                        scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                            changeModel($location.search());\n                        });\n\n                        //Init Model\n                        changeModel($location.search());\n                    }\n\n\n                    /**\n                     * Evaluate location search attribute if is form\n                     */\n                    if (formCtrl) {\n\n                        //Event Submit Form\n                        elem.on('submit', function() {\n                            var submit = scope.$eval(attrs.ngSubmit);\n                            var form = scope.$eval(attrs.name);\n\n                            if (submit && (!form || form.$valid)) {\n                                parseLocationSearch(submit);\n                            }\n                        });\n\n                        //Change Form on location change start\n                        scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                            changeForm($location.search());\n                        });\n\n                        //Init Form\n                        changeForm($location.search());\n                    }\n\n                }\n\n                /**\n                 * Destroy\n                 */\n                scope.$on('$destroy', function handleDestroyEvent() {\n                        if ( angular.isDefined(scope[attrs.ngSubmit]) ) {\n                            delete scope[attrs.ngSubmit];\n                        }\n                    }\n                );\n            }\n\n        };\n    }]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}