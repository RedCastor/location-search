{"version":3,"sources":["ng-location-search.js"],"names":["angular","module","directive","$timeout","$location","$window","$parse","restrict","require","link","scope","elem","attrs","Ctrl","search_keys","$eval","ngLocationSearch","isArray","modelCtrl","formCtrl","trailling_slash","url","replace","setLocationSearch","value","new_search","reset_search","ngLocationSearchReset","hashUrl","location","hash","absUrl","href","value_object","fromJson","err","forEach","key","val","search_val","isObject","isDefined","isString","current_search","search","extend","ngLocationSearchUrl","location_href","new_href","changeModel","loc_search","length","toJson","getter","ngModel","setter","assign","changeForm","fields","ngSubmit","isUndefined","$watch","$modelValue","newVal","oldVal","$on","event","newUrl","oldUrl","newState","oldState","on","submit","handleDestroyEvent","window"],"mappings":"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","file":"ng-location-search.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngLocationSearch', []).directive('ngLocationSearch', ['$timeout', '$location', '$window', '$parse', function ($timeout, $location, $window, $parse) {\n        return {\n            restrict: \"A\",\n            require: ['?ngModel', '?^form'],\n            link: function (scope, elem, attrs, Ctrl) {\n\n                var search_keys = scope.$eval(attrs.ngLocationSearch);\n                search_keys = angular.isArray(search_keys) ? search_keys : [attrs.ngLocationSearch];\n\n                /**\n                 * Set the controllers for model and form\n                 */\n                var modelCtrl = Ctrl[0];\n                var formCtrl = Ctrl[1];\n\n\n                /**\n                 * Trailling Slash Url\n                 *\n                 * @param url\n                 */\n                function trailling_slash (url) {\n                    return url.replace(/\\/$/, '');\n                }\n\n\n                /**\n                 * Parse value for set the location search.\n                 *\n                 * @param value\n                 */\n                function setLocationSearch(value) {\n\n                    if (!value) {\n                        return;\n                    }\n\n                    var new_search = {};\n                    var reset_search = scope.$eval(attrs.ngLocationSearchReset);\n                    var hashUrl = $window.location.hash.replace($location.url(), '');\n                    var absUrl = trailling_slash($window.location.href.replace($window.location.hash, ''));\n\n                    //Deserializes a JSON search string.\n                    try {\n                        var value_object = angular.fromJson(value);\n\n                        value = value_object;\n                    }\n                    catch(err) {\n\n                    }\n\n                    //Apply key val on location search.\n                    angular.forEach(search_keys, function (key, val) {\n                        var search_val = null;\n\n                        if (angular.isObject(value) && angular.isDefined(value[key]) ) {\n                            search_val = value[key];\n                        }\n                        else if (angular.isString(value)) {\n                            search_val = value;\n                        }\n\n                        new_search[key] = search_val !== '' ? search_val : null;\n                    });\n\n                    var current_search = $location.search();\n\n                    if (!reset_search) {\n                        new_search = angular.extend({}, current_search, new_search);\n                    }\n\n\n                    $timeout(function() {\n                        $location.search(new_search);\n                    });\n\n                    //Redirect to search url\n                    if(attrs.ngLocationSearchUrl && angular.isString(attrs.ngLocationSearchUrl)) {\n                        var location_href = trailling_slash(attrs.ngLocationSearchUrl);\n\n                        if (location_href !== absUrl) {\n\n                            var new_href = location_href + '/' + trailling_slash(hashUrl) + $location.url();\n\n                            $timeout(function() {\n                                $location.search({}).replace();\n                            });\n\n                            $window.location.href = new_href;\n                        }\n                    }\n                }\n\n                //Use the current model scope.\n                //Only if attribute is set\n                if (attrs.ngLocationSearch && (modelCtrl || formCtrl)) {\n\n                    var search = null;\n\n                    //Set the model change from location search object.\n                    var changeModel = function (loc_search) {\n                        search = (search_keys.length > 1) ? {} : null;\n\n                        //Find in url search params\n                        angular.forEach(search_keys, function (key, val) {\n\n                            if (angular.isObject(search)) {\n                                search[key] = angular.isDefined(loc_search[key]) ? loc_search[key] : null;\n                            }\n                            else if (angular.isDefined(loc_search[key])) {\n                                search = loc_search[key];\n                            }\n                        });\n\n                        //transform selected search to string\n                        if (angular.isObject(search)) {\n                            search = angular.toJson(search);\n                        }\n\n                        //Set default model value.\n                        var getter = $parse(attrs.ngModel);\n                        var setter = getter.assign;\n                        setter(scope, search);\n                    };\n\n\n\n                    //Set the model change from location search object.\n                    var changeForm = function (loc_search) {\n                        var fields = scope.$eval(attrs.ngSubmit);\n\n                        if (!fields && angular.isObject(fields)) {\n                            return;\n                        }\n\n                        if ( angular.isUndefined(scope[attrs.ngSubmit]) ) {\n                            scope[attrs.ngSubmit] = {};\n                        }\n\n                        //Find in url search params\n                        angular.forEach(search_keys, function (key, val) {\n\n                            if (angular.isDefined(loc_search[key])) {\n\n                                //Set default form value.\n                                scope[attrs.ngSubmit][key] = loc_search[key];\n                            }\n                        });\n                    };\n\n\n                    /**\n                     * Evaluate location search attribute if is ngModel\n                     */\n                    if ( modelCtrl ) {\n\n                        //Watch model change\n                        scope.$watch(function () {\n                                return modelCtrl.$modelValue;\n                            },\n                            function (newVal, oldVal) {\n\n                                if (newVal !== oldVal) {\n\n                                    setLocationSearch(newVal);\n                                }\n                            }\n                        );\n\n                        //Change Model on location change start\n                        scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                            changeModel($location.search());\n                        });\n\n                        //Init Model\n                        changeModel($location.search());\n                    }\n\n\n                    /**\n                     * Evaluate location search attribute if is form\n                     */\n                    if (formCtrl) {\n\n                        //Event Submit Form\n                        elem.on('submit', function() {\n                            var submit = scope.$eval(attrs.ngSubmit);\n\n                            if (submit) {\n                                setLocationSearch(submit);\n                            }\n                        });\n\n                        //Change Form on location change start\n                        scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                            changeForm($location.search());\n                        });\n\n                        //Init Form\n                        changeForm($location.search());\n                    }\n\n                }\n\n                /**\n                 * Destroy\n                 */\n                scope.$on('$destroy', function handleDestroyEvent() {\n                        if ( angular.isDefined(scope[attrs.ngSubmit]) ) {\n                            delete scope[attrs.ngSubmit];\n                        }\n                    }\n                );\n            }\n\n        };\n    }]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}