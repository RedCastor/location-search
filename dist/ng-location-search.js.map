{"version":3,"sources":["ng-location-search.js"],"names":["angular","module","directive","$log","$timeout","$location","$window","$parse","$httpParamSerializer","restrict","require","link","scope","elem","attrs","Ctrl","search_keys","modelCtrl","formCtrl","trailling_slash","url","isString","replace","parseLocationSearch","value","new_search","reset_search","$eval","ngLocationSearchReset","location_href","ngLocationSearchUrl","abs_url","location","href","hash","value_object","fromJson","err","forEach","key","val","search_val","isObject","isDefined","current_search","search","extend","is_add_to_url","indexOf","is_internal_url","is_abs_url","protocol","path_url","path","hash_url","param_url","new_href","$$html5","$apply","_path_urls","split","length","debug","ngLocationSearch","isArray","changeModel","loc_search","toJson","getter","ngModel","setter","assign","changeForm","fields","ngSubmit","$watch","$modelValue","newVal","oldVal","$on","event","newUrl","oldUrl","newState","oldState","on","submit","handleDestroyEvent","window"],"mappings":"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","file":"ng-location-search.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngLocationSearch', []).directive('ngLocationSearch', ['$log', '$timeout', '$location', '$window', '$parse', '$httpParamSerializer', function ($log, $timeout, $location, $window, $parse, $httpParamSerializer) {\n        return {\n            restrict: \"A\",\n            require: ['?ngModel', '?^form'],\n            link: function (scope, elem, attrs, Ctrl) {\n\n                var search_keys;\n\n                /**\n                 * Set the controllers for model and form\n                 */\n                var modelCtrl = Ctrl[0];\n                var formCtrl = Ctrl[1];\n\n\n                /**\n                 * Trailling Slash Url\n                 *\n                 * @param url\n                 */\n                function trailling_slash (url) {\n\n                    if ( angular.isString(url) ) {\n                        return url.replace(/\\/$/, '');\n                    }\n\n                    return false;\n                }\n\n\n                /**\n                 * Parse value for set the location search.\n                 *\n                 * @param value\n                 */\n                function parseLocationSearch(value) {\n\n                    var new_search = {};\n                    var reset_search = scope.$eval(attrs.ngLocationSearchReset);\n                    var location_href = trailling_slash(attrs.ngLocationSearchUrl);\n                    var abs_url = trailling_slash($window.location.href.replace($window.location.hash, ''));\n\n                    //Deserializes a JSON search string.\n                    try {\n                        var value_object = angular.fromJson(value);\n\n                        value = value_object;\n                    }\n                    catch(err) {\n\n                    }\n\n                    //Apply key val on location search.\n                    angular.forEach(search_keys, function (key, val) {\n                        var search_val = null;\n\n                        if (angular.isObject(value) && angular.isDefined(value[key]) ) {\n                            search_val = value[key];\n                        }\n                        else if (angular.isString(value)) {\n                            search_val = value;\n                        }\n\n                        new_search[key] = search_val !== '' ? search_val : null;\n                    });\n\n                    var current_search = $location.search();\n\n                    if (!reset_search) {\n                        new_search = angular.extend({}, current_search, new_search);\n                    }\n\n                    //Redirect to search url\n                    if (angular.isString(location_href) && location_href !== abs_url) {\n\n                        var is_add_to_url = (location_href.indexOf('/') === 0) ? false : true;\n                        var is_internal_url = location_href.indexOf('#!/') !== -1 || location_href.indexOf('#/') !== -1;\n                        var is_abs_url = location_href.indexOf($location.protocol()) === 0;\n\n                        var path_url = $location.path();\n                        var hash_url = trailling_slash($window.location.hash.replace($location.url(), ''));\n                        var param_url = $httpParamSerializer(new_search);\n\n                        var new_href = '';\n\n                        if (!$location.$$html5 || is_abs_url) {\n\n                            param_url = param_url ? '?' + param_url : '';\n                            new_href = location_href + param_url;\n\n                            if (!is_internal_url && is_abs_url) {\n                                path_url = path_url && !$location.$$html5 ? '/' : '';\n                                new_href = location_href + hash_url + path_url + param_url ;\n                            }\n\n                            $window.location.href = new_href;\n                        }\n                        else {\n\n                            $location.search(param_url);\n                            scope.$apply();\n\n                            if (is_add_to_url) {\n\n                                var _path_urls = path_url.split('/');\n\n                                //Prevent same last for relative url\n                                if ( _path_urls[_path_urls.length -1] === location_href) {\n                                    new_href = path_url;\n                                }\n                                else {\n                                    new_href = path_url + \"/\" + location_href;\n                                }\n                            }\n                            else {\n                                new_href = location_href;\n                            }\n\n                            $location.path(new_href);\n                            scope.$apply();\n                        }\n\n                        $log.debug(new_href);\n                    }\n                    else {\n                        $timeout(function() {\n                            $location.search(new_search);\n                        });\n                    }\n                }\n\n                //Use the current model scope.\n                //Only if attribute is set\n                if (attrs.ngLocationSearch && (modelCtrl || formCtrl)) {\n\n                    search_keys = scope.$eval(attrs.ngLocationSearch);\n                    search_keys = angular.isArray(search_keys) ? search_keys : [attrs.ngLocationSearch];\n                    var search = null;\n\n                    //Set the model change from location search object.\n                    var changeModel = function (loc_search) {\n                        search = (search_keys.length > 1) ? {} : null;\n\n                        //Find in url search params\n                        angular.forEach(search_keys, function (key, val) {\n\n                            if (angular.isObject(search)) {\n                                search[key] = angular.isDefined(loc_search[key]) ? loc_search[key] : null;\n                            }\n                            else if (angular.isDefined(loc_search[key])) {\n                                search = loc_search[key];\n                            }\n                        });\n\n                        //transform selected search to string\n                        if (angular.isObject(search)) {\n                            search = angular.toJson(search);\n                        }\n\n                        //Set default model value.\n                        var getter = $parse(attrs.ngModel);\n                        var setter = getter.assign;\n                        setter(scope, search);\n                    };\n\n\n\n                    //Set the model change from location search object.\n                    var changeForm = function (loc_search) {\n\n                        if (search_keys.length > 0) {\n                            var fields = scope.$eval(attrs.ngSubmit);\n\n                            search = {};\n\n                            angular.forEach(search_keys, function(key, val) {\n                                if (angular.isDefined(loc_search[key])) {\n                                    search[key] = loc_search[key];\n                                }\n                            });\n\n                            fields = !angular.isObject(fields) ? {} : fields;\n                            search = angular.extend(fields, search);\n\n                            var getter = $parse(attrs.ngSubmit);\n                            var setter = getter.assign;\n                            setter(scope, search);\n                        }\n                    };\n\n\n                    /**\n                     * Evaluate location search attribute if is ngModel\n                     */\n                    if ( modelCtrl ) {\n\n                        //Watch model change\n                        scope.$watch(function () {\n                                return modelCtrl.$modelValue;\n                            },\n                            function (newVal, oldVal) {\n\n                                if (newVal !== oldVal) {\n\n                                    parseLocationSearch(newVal);\n                                }\n                            }\n                        );\n\n                        //Change Model on location change start\n                        scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                            changeModel($location.search());\n                        });\n\n                        //Init Model\n                        changeModel($location.search());\n                    }\n\n\n                    /**\n                     * Evaluate location search attribute if is form\n                     */\n                    if (formCtrl) {\n\n                        //Event Submit Form\n                        elem.on('submit', function() {\n                            var submit = scope.$eval(attrs.ngSubmit);\n\n                            if (submit) {\n                                parseLocationSearch(submit);\n                            }\n                        });\n\n                        //Change Form on location change start\n                        scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                            changeForm($location.search());\n                        });\n\n                        //Init Form\n                        changeForm($location.search());\n                    }\n\n                }\n\n                /**\n                 * Destroy\n                 */\n                scope.$on('$destroy', function handleDestroyEvent() {\n                        if ( angular.isDefined(scope[attrs.ngSubmit]) ) {\n                            delete scope[attrs.ngSubmit];\n                        }\n                    }\n                );\n            }\n\n        };\n    }]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}