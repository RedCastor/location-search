{"version":3,"sources":["ng-location-search.js"],"names":["angular","module","directive","$rootScope","$log","$timeout","$location","$window","$parse","$httpParamSerializer","restrict","require","link","scope","elem","attrs","Ctrl","untrailling_slash","url","isString","replace","trailling_slash","to_type","value","type","isArray","length","split","isNumber","parseFloat","default_value","ngLocationSearchDefault","$eval","search_keys","modelCtrl","formCtrl","parseLocationSearch","new_search","is_replace_search","ngLocationSearchReplace","reset_search","ngLocationSearchReset","location_href","ngLocationSearchUrl","abs_url","location","href","hash","delay_change","ngLocationSearchDelay","value_object","fromJson","err","forEach","key","val","search_val","isObject","isDefined","toString","current_search","search","extend","equals","$broadcast","is_add_to_url","indexOf","is_internal_url","is_abs_url","protocol","path_url","path","hash_url","param_url","new_href","$$html5","$apply","_path_urls","parseInt","ngLocationSearch","changeModel","loc_search","types","ngLocationSearchTypes","toJson","getter","ngModel","setter","assign","$watch","$modelValue","newVal","oldVal","$valid","model_name","name","$on","event","newUrl","oldUrl","newState","oldState","resetForm","changeForm","submitForm","fields","ngSubmit","$resetForm","undefined","data","submit","form_name","form","on","handleDestroyEvent","window"],"mappings":"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","file":"ng-location-search.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngLocationSearch', []).directive('ngLocationSearch', [\n        '$rootScope',\n        '$log',\n        '$timeout',\n        '$location',\n        '$window',\n        '$parse',\n        '$httpParamSerializer',\n        function ($rootScope, $log, $timeout, $location, $window, $parse, $httpParamSerializer) {\n            return {\n                restrict: \"A\",\n                require: ['?ngModel', '?^form'],\n                link: function (scope, elem, attrs, Ctrl) {\n\n                    /**\n                     * Trailling Slash Url\n                     *\n                     * @param url\n                     */\n                    function untrailling_slash (url) {\n\n                        if ( angular.isString(url) ) {\n                            return url.replace(/\\/$/, '');\n                        }\n\n                        return false;\n                    }\n\n                    /**\n                     * Trailling Slash Url\n                     *\n                     * @param url\n                     */\n                    function trailling_slash (url) {\n\n                        if ( angular.isString(url) ) {\n                            return untrailling_slash(url) + '/';\n                        }\n\n                        return false;\n                    }\n\n                    function to_type ( value, type) {\n\n                        switch (type) {\n                            case 'array':\n                                return angular.isArray(value) ? value : ((angular.isString(value) && value.length > 0) ? value.split(',') : null);\n                            case 'number':\n                                return angular.isNumber(value) ? value : parseFloat(value);\n                            case 'string':\n                                return angular.isString(value) ? value : null;\n                            default:\n                                return value;\n                        }\n                    }\n\n                    var default_value = attrs.ngLocationSearchDefault ? scope.$eval(attrs.ngLocationSearchDefault) : null;\n                    var search_keys;\n\n                    /**\n                     * Set the controllers for model and form\n                     */\n                    var modelCtrl = Ctrl[0];\n                    var formCtrl = Ctrl[1];\n\n                    /**\n                     * Parse value for set the location search.\n                     *\n                     * @param value\n                     */\n                    var parseLocationSearch = function (value) {\n\n                        var new_search = {};\n                        var is_replace_search = scope.$eval(attrs.ngLocationSearchReplace);\n                        var reset_search = scope.$eval(attrs.ngLocationSearchReset);\n                        var location_href = attrs.ngLocationSearchUrl;\n                        var abs_url = $window.location.href.replace($window.location.hash, '');\n                        var delay_change = attrs.ngLocationSearchDelay || 0;\n\n                        //Deserializes a JSON search string.\n                        try {\n                            var value_object = angular.fromJson(value);\n\n                            value = value_object;\n                        }\n                        catch(err) {\n\n                        }\n\n                        //Apply key val on location search.\n                        angular.forEach(search_keys, function (key, val) {\n                            var search_val = default_value;\n\n                            if (angular.isObject(value) && angular.isDefined(value[key]) ) {\n                                search_val = value[key];\n                            }\n                            else if (angular.isString(value)) {\n                                search_val = value;\n                            }\n\n                            if (angular.isArray(search_val)) {\n                                search_val = search_val.toString();\n                            }\n\n                            new_search[key] = (search_val && search_val !== '') ? search_val.toString() : ((search_val === '') ? null : default_value);\n                        });\n\n                        var current_search = $location.search();\n\n                        if (!reset_search) {\n                            new_search = angular.extend({}, current_search, new_search);\n                        }\n\n                        //Exit if same as current url search\n                        if (angular.equals(new_search, current_search)) {\n                            return;\n                        }\n\n                        $rootScope.$broadcast('ngLocationSearchChangeStart', new_search, current_search);\n\n                        $timeout(function () {\n\n                            //Redirect to search url\n                            if (angular.isString(location_href) && location_href !== abs_url) {\n\n                                var is_add_to_url = (location_href.indexOf('/') === 0) ? false : true;\n                                var is_internal_url = location_href.indexOf('#!/') !== -1 || location_href.indexOf('#/') !== -1;\n                                var is_abs_url = location_href.indexOf($location.protocol()) === 0;\n\n                                var path_url = $location.path();\n                                var hash_url = untrailling_slash($window.location.hash.replace($location.url(), ''));\n                                var param_url = $httpParamSerializer(new_search);\n\n                                var new_href = '';\n\n                                if (!$location.$$html5 || is_abs_url) {\n\n                                    param_url = param_url ? '?' + param_url : '';\n                                    new_href = location_href + param_url;\n\n                                    if (!is_internal_url && is_abs_url) {\n                                        path_url = path_url && !$location.$$html5 ? '/' : '';\n                                        new_href = location_href + hash_url + path_url + param_url ;\n                                    }\n\n                                    $window.location.href = new_href;\n\n                                    $location.search(new_search);\n                                }\n                                else {\n\n                                    $location.search(param_url);\n\n                                    if (is_replace_search) {\n                                        scope.$apply();\n                                    }\n\n                                    if (is_add_to_url) {\n\n                                        var _path_urls = path_url.split('/');\n\n                                        //Prevent same last for relative url\n                                        if ( _path_urls[_path_urls.length -1] === location_href) {\n                                            new_href = path_url;\n                                        }\n                                        else {\n                                            new_href = path_url + '/' + location_href;\n                                        }\n                                    }\n                                    else {\n                                        new_href = location_href;\n                                    }\n\n                                    $location.path(new_href);\n                                    scope.$apply();\n                                }\n                            }\n                            else {\n                                $location.search(new_search);\n                            }\n\n                            $rootScope.$broadcast('ngLocationSearchChangeSuccess', new_search, current_search);\n                        }, parseInt(delay_change, 10));\n                    };\n\n                    //Use the current model scope.\n                    //Only if attribute is set\n                    if (attrs.ngLocationSearch && (modelCtrl || formCtrl)) {\n\n                        search_keys = scope.$eval(attrs.ngLocationSearch);\n                        search_keys = angular.isArray(search_keys) ? search_keys : [attrs.ngLocationSearch];\n                        var search = default_value;\n\n                        //Set the model change from location search object.\n                        var changeModel = function (loc_search) {\n                            var types = attrs.ngLocationSearchTypes ? scope.$eval(attrs.ngLocationSearchTypes) : {};\n\n                            search = (search_keys.length > 1) ? {} : default_value;\n\n                            //Find in url search params\n                            angular.forEach(search_keys, function (key, val) {\n\n                                if (angular.isObject(search)) {\n                                    search[key] = to_type((angular.isDefined(loc_search[key]) ? loc_search[key] : default_value), types[key]);\n                                }\n                                else {\n\n                                    search = to_type((angular.isDefined(loc_search[key]) ? loc_search[key] : default_value), types[key]);\n                                }\n                            });\n\n                            //transform selected search to string\n                            if (angular.isObject(search)) {\n                                search = angular.toJson(search);\n                            }\n\n                            //Set default model value.\n                            var getter = $parse(attrs.ngModel);\n                            var setter = getter.assign;\n                            setter(scope, search);\n                        };\n\n\n                        /**\n                         * Evaluate location search attribute if is ngModel\n                         */\n                        if ( modelCtrl ) {\n\n                            //Watch model change\n                            scope.$watch(function () {\n                                    return modelCtrl.$modelValue;\n                                },\n                                function (newVal, oldVal) {\n\n                                    if (newVal !== oldVal && modelCtrl.$valid) {\n\n                                        parseLocationSearch(newVal);\n                                    }\n                                    else {\n                                        var model_name = attrs.name;\n                                        $rootScope.$broadcast('ngLocationSearchChangeError', 'model', model_name, modelCtrl);\n                                    }\n                                }\n                            );\n\n                            //Change Model on location change start\n                            scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                                changeModel($location.search());\n                            });\n\n                            //Init Model\n                            changeModel($location.search());\n                        }\n\n\n                        /**\n                         * Evaluate location search attribute if is form\n                         */\n                        if (formCtrl) {\n\n                            var resetForm, changeForm, submitForm;\n\n                            //Set the model change from location search object.\n                            changeForm = function (loc_search) {\n\n                                if (search_keys.length > 0) {\n                                    var fields = scope.$eval(attrs.ngSubmit);\n                                    var types = attrs.ngLocationSearchTypes ? scope.$eval(attrs.ngLocationSearchTypes) : {};\n\n                                    search = {\n                                        $resetForm: undefined\n                                    };\n\n                                    angular.forEach(search_keys, function(key, val) {\n\n                                        search[key] = to_type((angular.isDefined(loc_search[key]) ? loc_search[key] : default_value), types[key]);\n\n                                        if (search[key]) {\n                                            search.$resetForm = resetForm;\n                                        }\n                                    });\n\n                                    fields = !angular.isObject(fields) ? {} : fields;\n                                    search = angular.extend(fields, search);\n\n                                    var getter = $parse(attrs.ngSubmit);\n                                    var setter = getter.assign;\n                                    setter(scope, search);\n                                }\n                            };\n\n                            submitForm = function (event, data) {\n\n                                var submit = angular.isDefined(data) ? data : scope.$eval(attrs.ngSubmit);\n                                var form_name = attrs.name;\n                                var form = scope.$eval(form_name);\n\n                                if (angular.isDefined(submit) && (!form || form.$valid)) {\n                                    parseLocationSearch(submit);\n                                }\n                                else {\n                                    $rootScope.$broadcast('ngLocationSearchChangeError', 'form', form_name, form);\n                                }\n                            };\n\n                            resetForm = function () {\n\n                                submitForm(null, null);\n                            };\n\n                            //Attach event Submit Form\n                            elem.on('submit', submitForm);\n\n                            //Change Form on location change start\n                            scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                                changeForm($location.search());\n                            });\n\n                            //Init Form\n                            changeForm($location.search());\n                        }\n\n                    }\n\n                    /**\n                     * Destroy\n                     */\n                    scope.$on('$destroy', function handleDestroyEvent() {\n                            if ( angular.isDefined(scope[attrs.ngSubmit]) ) {\n                                delete scope[attrs.ngSubmit];\n                            }\n                        }\n                    );\n                }\n\n            };\n        }\n    ]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}