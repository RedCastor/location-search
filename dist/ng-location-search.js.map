{"version":3,"sources":["ng-location-search.js"],"names":["angular","module","directive","$rootScope","$log","$timeout","$location","$window","$parse","$httpParamSerializer","restrict","require","link","scope","elem","attrs","Ctrl","default_value","ngLocationSearchDefault","$eval","search_keys","modelCtrl","formCtrl","untrailling_slash","url","isString","replace","trailling_slash","parseLocationSearch","value","new_search","is_replace_search","ngLocationSearchReplace","reset_search","ngLocationSearchReset","location_href","ngLocationSearchUrl","abs_url","location","href","hash","delay_change","ngLocationSearchDelay","value_object","fromJson","err","forEach","key","val","search_val","isObject","isDefined","toString","current_search","search","extend","equals","$broadcast","is_add_to_url","indexOf","is_internal_url","is_abs_url","protocol","path_url","path","hash_url","param_url","new_href","$$html5","$apply","_path_urls","split","length","parseInt","ngLocationSearch","isArray","changeModel","loc_search","toJson","getter","ngModel","setter","assign","changeForm","fields","ngSubmit","$watch","$modelValue","newVal","oldVal","$valid","model_name","name","$on","event","newUrl","oldUrl","newState","oldState","on","submit","form_name","form","handleDestroyEvent","window"],"mappings":"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","file":"ng-location-search.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngLocationSearch', []).directive('ngLocationSearch', [\n        '$rootScope',\n        '$log',\n        '$timeout',\n        '$location',\n        '$window',\n        '$parse',\n        '$httpParamSerializer',\n        function ($rootScope, $log, $timeout, $location, $window, $parse, $httpParamSerializer) {\n            return {\n                restrict: \"A\",\n                require: ['?ngModel', '?^form'],\n                link: function (scope, elem, attrs, Ctrl) {\n\n                    var default_value = attrs.ngLocationSearchDefault ? scope.$eval(attrs.ngLocationSearchDefault) : null;\n                    var search_keys;\n\n                    /**\n                     * Set the controllers for model and form\n                     */\n                    var modelCtrl = Ctrl[0];\n                    var formCtrl = Ctrl[1];\n\n\n                    /**\n                     * Trailling Slash Url\n                     *\n                     * @param url\n                     */\n                    function untrailling_slash (url) {\n\n                        if ( angular.isString(url) ) {\n                            return url.replace(/\\/$/, '');\n                        }\n\n                        return false;\n                    }\n\n                    /**\n                     * Trailling Slash Url\n                     *\n                     * @param url\n                     */\n                    function trailling_slash (url) {\n\n                        if ( angular.isString(url) ) {\n                            return untrailling_slash(url) + '/';\n                        }\n\n                        return false;\n                    }\n\n\n                    /**\n                     * Parse value for set the location search.\n                     *\n                     * @param value\n                     */\n                    function parseLocationSearch(value) {\n\n                        var new_search = {};\n                        var is_replace_search = scope.$eval(attrs.ngLocationSearchReplace);\n                        var reset_search = scope.$eval(attrs.ngLocationSearchReset);\n                        var location_href = attrs.ngLocationSearchUrl;\n                        var abs_url = $window.location.href.replace($window.location.hash, '');\n                        var delay_change = attrs.ngLocationSearchDelay || 0;\n\n                        //Deserializes a JSON search string.\n                        try {\n                            var value_object = angular.fromJson(value);\n\n                            value = value_object;\n                        }\n                        catch(err) {\n\n                        }\n\n                        //Apply key val on location search.\n                        angular.forEach(search_keys, function (key, val) {\n                            var search_val = default_value;\n\n                            if (angular.isObject(value) && angular.isDefined(value[key]) ) {\n                                search_val = value[key];\n                            }\n                            else if (angular.isString(value)) {\n                                search_val = value;\n                            }\n\n                            new_search[key] = (search_val && search_val !== '') ? search_val.toString() : ((search_val === '') ? null : default_value);\n                        });\n\n                        var current_search = $location.search();\n\n                        if (!reset_search) {\n                            new_search = angular.extend({}, current_search, new_search);\n                        }\n\n                        //Exit if same as current url search\n                        if (angular.equals(new_search, current_search)) {\n                            return;\n                        }\n\n                        $rootScope.$broadcast('ngLocationSearchChangeStart', new_search, current_search);\n\n                        $timeout(function () {\n\n                            //Redirect to search url\n                            if (angular.isString(location_href) && location_href !== abs_url) {\n\n                                var is_add_to_url = (location_href.indexOf('/') === 0) ? false : true;\n                                var is_internal_url = location_href.indexOf('#!/') !== -1 || location_href.indexOf('#/') !== -1;\n                                var is_abs_url = location_href.indexOf($location.protocol()) === 0;\n\n                                var path_url = $location.path();\n                                var hash_url = untrailling_slash($window.location.hash.replace($location.url(), ''));\n                                var param_url = $httpParamSerializer(new_search);\n\n                                var new_href = '';\n\n                                if (!$location.$$html5 || is_abs_url) {\n\n                                    param_url = param_url ? '?' + param_url : '';\n                                    new_href = location_href + param_url;\n\n                                    if (!is_internal_url && is_abs_url) {\n                                        path_url = path_url && !$location.$$html5 ? '/' : '';\n                                        new_href = location_href + hash_url + path_url + param_url ;\n                                    }\n\n                                    $window.location.href = new_href;\n\n                                    $location.search(new_search);\n                                }\n                                else {\n\n                                    $location.search(param_url);\n\n                                    if (is_replace_search) {\n                                        scope.$apply();\n                                    }\n\n                                    if (is_add_to_url) {\n\n                                        var _path_urls = path_url.split('/');\n\n                                        //Prevent same last for relative url\n                                        if ( _path_urls[_path_urls.length -1] === location_href) {\n                                            new_href = path_url;\n                                        }\n                                        else {\n                                            new_href = path_url + '/' + location_href;\n                                        }\n                                    }\n                                    else {\n                                        new_href = location_href;\n                                    }\n\n                                    $location.path(new_href);\n                                    scope.$apply();\n                                }\n                            }\n                            else {\n                                $location.search(new_search);\n                            }\n\n                            $rootScope.$broadcast('ngLocationSearchChangeSuccess', new_search, current_search);\n                        }, parseInt(delay_change, 10));\n                    }\n\n                    //Use the current model scope.\n                    //Only if attribute is set\n                    if (attrs.ngLocationSearch && (modelCtrl || formCtrl)) {\n\n                        search_keys = scope.$eval(attrs.ngLocationSearch);\n                        search_keys = angular.isArray(search_keys) ? search_keys : [attrs.ngLocationSearch];\n                        var search = default_value;\n\n                        //Set the model change from location search object.\n                        var changeModel = function (loc_search) {\n                            search = (search_keys.length > 1) ? {} : default_value;\n\n                            //Find in url search params\n                            angular.forEach(search_keys, function (key, val) {\n\n                                if (angular.isObject(search)) {\n                                    search[key] = angular.isDefined(loc_search[key]) ? loc_search[key] : default_value;\n                                }\n                                else if (angular.isDefined(loc_search[key])) {\n                                    search = loc_search[key];\n                                }\n                            });\n\n                            //transform selected search to string\n                            if (angular.isObject(search)) {\n                                search = angular.toJson(search);\n                            }\n\n                            //Set default model value.\n                            var getter = $parse(attrs.ngModel);\n                            var setter = getter.assign;\n                            setter(scope, search);\n                        };\n\n\n\n                        //Set the model change from location search object.\n                        var changeForm = function (loc_search) {\n\n                            if (search_keys.length > 0) {\n                                var fields = scope.$eval(attrs.ngSubmit);\n\n                                search = {};\n\n                                angular.forEach(search_keys, function(key, val) {\n                                    if (angular.isDefined(loc_search[key])) {\n                                        search[key] = loc_search[key];\n                                    }\n                                });\n\n                                fields = !angular.isObject(fields) ? {} : fields;\n                                search = angular.extend(fields, search);\n\n                                var getter = $parse(attrs.ngSubmit);\n                                var setter = getter.assign;\n                                setter(scope, search);\n                            }\n                        };\n\n\n                        /**\n                         * Evaluate location search attribute if is ngModel\n                         */\n                        if ( modelCtrl ) {\n\n                            //Watch model change\n                            scope.$watch(function () {\n                                    return modelCtrl.$modelValue;\n                                },\n                                function (newVal, oldVal) {\n\n                                    if (newVal !== oldVal && modelCtrl.$valid) {\n\n                                        parseLocationSearch(newVal);\n                                    }\n                                    else {\n                                        var model_name = attrs.name;\n                                        $rootScope.$broadcast('ngLocationSearchChangeError', 'model', model_name, modelCtrl);\n                                    }\n                                }\n                            );\n\n                            //Change Model on location change start\n                            scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                                changeModel($location.search());\n                            });\n\n                            //Init Model\n                            changeModel($location.search());\n                        }\n\n\n                        /**\n                         * Evaluate location search attribute if is form\n                         */\n                        if (formCtrl) {\n\n                            //Event Submit Form\n                            elem.on('submit', function() {\n                                var submit = scope.$eval(attrs.ngSubmit);\n                                var form_name = attrs.name;\n                                var form = scope.$eval(form_name);\n\n                                if (submit && (!form || form.$valid)) {\n                                    parseLocationSearch(submit);\n                                }\n                                else {\n                                    $rootScope.$broadcast('ngLocationSearchChangeError', 'form', form_name, form);\n                                }\n                            });\n\n                            //Change Form on location change start\n                            scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                                changeForm($location.search());\n                            });\n\n                            //Init Form\n                            changeForm($location.search());\n                        }\n\n                    }\n\n                    /**\n                     * Destroy\n                     */\n                    scope.$on('$destroy', function handleDestroyEvent() {\n                            if ( angular.isDefined(scope[attrs.ngSubmit]) ) {\n                                delete scope[attrs.ngSubmit];\n                            }\n                        }\n                    );\n                }\n\n            };\n        }\n    ]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}